package minesweeper;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import minesweeper.Minesweeper.CellState;
import org.junit.After;

public class MinesweeperTest {

    Minesweeper minesweeper;
    boolean exposeNeighborsOfCalled;

    @Before
    public void setUp()
    {
        minesweeper = new Minesweeper();
        exposeNeighborsOfCalled = false;
    }

    @Test
    public void Canary()
    {
        assertTrue(true);
    }

    @Test
    public void exposeCellOnNonExposedCell()
    {
        minesweeper.exposeCell(3, 4);
        assertEquals(CellState.EXPOSED, minesweeper.getCellState(3, 4));
    }

    @Test
    public void exposeAlreadyExposedCell()
    {
        minesweeper.exposeCell(2, 2);
        minesweeper.exposeCell(2, 2);
        assertEquals(CellState.EXPOSED, minesweeper.getCellState(2, 2));
    }

    @Test
    public void exposeCellExposesItsNeighbors()
    {
        Minesweeper minesweeper = new Minesweeper()
        {

            protected void exposeNeighborsOf(int row, int column)
            {
                exposeNeighborsOfCalled = true;
            }
        };

        minesweeper.exposeCell(3, 4);
        assertTrue(exposeNeighborsOfCalled);
    }

    @Test
    public void exposeCellOnAlreadyExposedDoesNotExposeNeighbors()
    {
        Minesweeper minesweeper = new Minesweeper()
        {

            protected void exposeNeighborsOf(int row, int column)
            {
                exposeNeighborsOfCalled = true;
            }

        };
        minesweeper.exposeCell(3, 4);
        assertTrue(exposeNeighborsOfCalled);
        exposeNeighborsOfCalled = false;
        minesweeper.exposeCell(3, 4);
        assertFalse(exposeNeighborsOfCalled);
    }

    @Test
    public void exposeCellOnAdjacentCellDoesNotExposeNeighbors() {
        Minesweeper minesweeper = new Minesweeper()
        {

            protected void exposeNeighborsOf(int row, int column)
            {
                exposeNeighborsOfCalled = true;
            }
            protected boolean isAnAdjacentCell(int row, int column) {
                return true;
            }
        };

        minesweeper.exposeCell(3,4);
        assertFalse(exposeNeighborsOfCalled);
    }

    @Test
    public void exposeCellOutOfBoundsError()
    {
        try
        {
            minesweeper.exposeCell(8, 10);
            fail("Expected null pointer exception.");
        }
        catch(ArrayIndexOutOfBoundsException e)
        {
            assertTrue(true);
        }
    }

    @Test
    public void exposeCellTwoDifferentCells()
    {
        minesweeper.exposeCell(8, 3);
        minesweeper.exposeCell(2, 0);

        assertEquals(CellState.EXPOSED, minesweeper.getCellState(8, 3));
        assertEquals(CellState.EXPOSED, minesweeper.getCellState(2, 0));
    }

}
